@using ChatApp.Models;
@using ChatApp.Repositories;  

@inject UserRepository userRepository
@inject ConnectedUserRepository connectedUserRepository

<h4>Connected Users</h4>
<ul>
    @foreach(var connectedUser in connectedUsers){
        <li>
            @connectedUser.IPAddress
            <span style="color: @connectedUser.Color">@connectedUser.Username</span>
        </li>
    }

</ul>


@code{
    private IEnumerable<User> connectedUsers = new List<User>(); 
        
    protected override void OnAfterRender(bool firstRender){
        if(firstRender == true){
            readConnectedUsers(); 
            ConnectedUserRepository.Change += refresh; 
        }
        base.OnAfterRender(firstRender); 
    }

    private async void refresh(object caller, EventArgs args){
         await InvokeAsync(() =>{
            readConnectedUsers(); 
            StateHasChanged(); 
        } ); 
    }

    private void readConnectedUsers(){
        var connectedUsersIPAddresses = connectedUserRepository.ReadAll().Select(i => i.IPAddress); 
        connectedUsers = userRepository.ReadAll().Where(p => connectedUsersIPAddresses.Contains(p.IPAddress)); 

    }
}