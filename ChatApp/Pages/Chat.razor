@page "/Chat"

@using Microsoft.AspNetCore.SignalR.Client; 
@using ChatApp.Hubs; 
@using ChatApp.Models;  
@using Microsoft.AspNetCore.Http; 
@using ChatApp.LogicComponents; 

@inject IHttpContextAccessor httpContextAccessor; 
@inject UserManager userManager; 

@implements IDisposable

@inject NavigationManager _navigationManager; 
<h1>Chat</h1>
<!--Display Messages Here--> 
<div>
    @foreach (var message in messages)
    {
        <div>
            <p>
            @message.User.Username: 
            <span>&nbsp;</span>
            @message.MessageText
            </p>
        </div>
    }
</div> 
<!--Chat Box-->
<div>
    <div class="panel-footer">
        <div class="input-group" id="myForm">
            <input id="textMessageInput" @bind="messageText" type="text" class="form-control input-sm chat_input" placeholder="Write your message here...">
        <button class="btn btn-primary" @onclick="Send">Send</button>
        </div>
    </div>
</div>

@code{ 
        private HubConnection hubConnection; 
        private List<Message> messages = new List<Message>(); 

        private string messageText{get; set;}
        private User username{get; set;}

        async protected override Task OnInitializedAsync()
        {
            var baseURL = _navigationManager.BaseUri.Trim('/'); 
            var connectionURL = baseURL + ChatHub.hubPath; 
            hubConnection = new HubConnectionBuilder().WithUrl(connectionURL).Build(); 
            hubConnection.On<Message>("SendMessage", onReceiveMessage); 
            await hubConnection.StartAsync(); 
        }

        public async Task CloseHubConnection(){
            await hubConnection.StopAsync(); 
            await hubConnection.DisposeAsync(); 
            hubConnection = null; 
        }

        public void onReceiveMessage(Message message){
            messages.Add(message);
            StateHasChanged(); 
        } 

        public void Dispose(){
            CloseHubConnection(); 
        }

        public async Task Send(){
            Message message = new Message(); 
            message.MessageText = messageText; 
            message.User = userManager.readLoggedInUser(httpContextAccessor); 
            await hubConnection.SendAsync("SendMessage", message); 
            messageText = ""; 

        }
}

