@page "/"

@using ChatApp.Helpers
@using Microsoft.AspNetCore.SignalR.Client; 
@using ChatApp.Hubs; 
@using ChatApp.Models;  
@using Microsoft.AspNetCore.Http; 
@using ChatApp.LogicComponents; 

@inject IHttpContextAccessor httpContextAccessor; 
@inject UserManager userManager; 
@inject IJSRuntime jSRuntime; 

@implements IDisposable

@inject NavigationManager _navigationManager; 
<h1>Chat</h1>
<!--Display Messages Here--> 
<body>
    <div>
        @foreach (var message in messages)
        {
            <div>
                <p>
                <span style="color: @message.User.Color">@message.User.Username: </span>
                <span>&nbsp;</span>
                @message.MessageText
                </p>
            </div>
        }
    </div> 
    <!--Chat Box-->
    <br>
    <div>
        <div class="panel-footer">
            <div class="input-group" id="myForm">
                <input id="textMessageInput" @bind="messageText" type="text" class="form-control input-sm chat_input" placeholder="Write your message here...">
            <button class="btn btn-primary" @onclick="Send">Send</button>
            </div>
        </div>
    </div>
</body>
<!--Display Users-->
<footer>
    <br><br><br>
    <div>
        <ConnectedUsers/>
    </div>
</footer>

@code { 
    private HubConnection hubConnection; 
    private List<Message> messages = new List<Message>(); 

    private string messageText{get; set;}

    protected override async Task OnInitializedAsync()
    {
        var baseURL = _navigationManager.BaseUri.Trim('/'); 
        var connectionURL = baseURL + ChatHub.hubPath; 
        hubConnection = new HubConnectionBuilder().WithUrl(connectionURL).Build(); 
        hubConnection.On<Message>("SendMessage", onReceiveMessage); 
        await hubConnection.StartAsync(); 
        await RegisterConnectedUser();
        await NotificationHelper.RequestNotifPermission(jSRuntime);
    }

    public async Task CloseHubConnection(){
        await hubConnection.StopAsync(); 
        await hubConnection.DisposeAsync(); 
        hubConnection = null; 
    }

        public void onReceiveMessage(Message message){
            messages.Add(message);
            StateHasChanged(); 
            var loggedInUser = userManager.readLoggedInUser(httpContextAccessor); 
            if(loggedInUser.IPAddress != message.User.IPAddress){
                NotificationHelper.Notify(message.User.Username, new Notification{Body = message.MessageText}, jSRuntime); 
            }
        } 

    public void Dispose(){
        CloseHubConnection(); 
    }

    public async Task Send(){
        Message message = new Message(); 
        message.MessageText = messageText; 
        message.User = userManager.readLoggedInUser(httpContextAccessor); 
        await hubConnection.SendAsync("SendMessage", message); 
        messageText = ""; 
    }

    private async Task RegisterConnectedUser()
    {
        var connectedUser = new ConnectedUser
        {
            IPAddress = userManager.readLoggedInUser(httpContextAccessor).IPAddress
        };
        await hubConnection.SendAsync("OnNewConnectedUser", connectedUser);
    }
}

